<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Fill with ground plane grid</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <menu-path>kqcircuits_menu.#4</menu-path>
 <group-name>misc</group-name>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).


"""
Creates a ground plane grid covering the top cell bounding box, except the parts in grid avoidance layer. Requires at
least one cell to exist in the current layout. Only creates the grid for "1t1"-face.
"""

from kqcircuits.defaults import default_layers
from kqcircuits.klayout_view import KLayoutView
from kqcircuits.util.groundgrid import make_grid

cell = KLayoutView(current=True).active_cell

if not cell:
  raise ValueError('Create a cell first')

layout = cell.layout()
grid_area = cell.bbox_per_layer(layout.layer(default_layers["1t1_ground_grid_avoidance"]))
protection = pya.Region(cell.begin_shapes_rec(layout.layer(default_layers["1t1_ground_grid_avoidance"]))).merged()

grid_mag_factor = 1
region_ground_grid = make_grid(grid_area, protection,
  grid_step = 10*(1/layout.dbu)*grid_mag_factor,
  grid_size = 5*(1/layout.dbu)*grid_mag_factor )

cell.shapes(layout.layer(default_layers["1t1_ground_grid"])).insert(region_ground_grid)</text>
</klayout-macro>
