<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Convert layout to Python code</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).

from kqcircuits.klayout_view import KLayoutView
from kqcircuits.util.layout_to_code import convert_cells_to_code

"""Macro for converting a layout into Python code.

For each cell placed in GUI, prints out `insert_cell()` or `create()` commands that can be copy pasted to a chip's `build()` method
or to a macro, respectively. PCell parameters are taken into account. Waveguide points can automatically be snapped to closest refpoints in the
generated code. See also the configuration options below.

Usage:

(Steps 1-3 are needed only if you want to add the cells to a Chip instead of a macro.)

1. Place to the layout the chip that you want to add elements to.
2. Convert the chip cell to static cell.
3. Select the chip cell as top cell.

4. Place any cells in the layout, or modify cells already existing under the top cell.
5. Select in GUI the cell instances that you want to export as code, or select nothing to export all instances under the top cell.
6. Run the macro. This prints out the Python code for creating the cell instances.

"""

# Configuration options for this macro, change them as needed.

# If true, then WaveguideCoplanar elements are printed as WaveguideComposite. (i.e. a list of Nodes instead of a DPath)
print_waveguides_as_composite = False
# If true, then unique instance names will be added for each printed element. This is required if you want to have
# waveguides connect to refpoints of elements that were placed in GUI.
add_instance_names = True
# If a waveguide point is closer than refpoint_snap to a refpoint, the waveguide point will be that refpoint
refpoint_snap = 50.0
# If a waveguide point was not close enough to a refpoint, it will be snapped to a square grid with square side length
# equal to `grid_snap`
grid_snap = 1.0
# Determines the format of the code for placing cells and if some extra code is printed. Has the following options:
#
#   "insert_cell": only insert_cell() calls which can be copied to existing chip's/element's build method
#   "insert_cell+chip": same as previous, but prints also the chip code, can copy to empty file to create new chip
#   "create": only create() and cell.insert() calls which can be copied to an existing macro with layout and top_cell
#   "create+macro": same as previous, but includes initial lines for macro, can copy to empty file to create new macro
output_format = "create+macro"
# If true, then import statements for all used elements are included in the generated code
include_imports = True
# If true, then create_with_refpoints() is used instead of create(). Only used when output_format is "create" or
# "create+macro". Required if you want to use refpoints as waveguide points.
use_create_with_refpoints = True

top_cell = KLayoutView(current=True).active_cell
# the code is returned by the function
full_code = convert_cells_to_code(top_cell, print_waveguides_as_composite, add_instance_names, refpoint_snap,
                                  grid_snap, output_format, include_imports, use_create_with_refpoints)
print(full_code)
# capturing to clipboard can be done for example with Pandas as follows:
# import pandas as pd
# pd.DataFrame([full_code]).to_clipboard(index=False, header=False)</text>
</klayout-macro>
