<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Exports junctions parameters</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2024 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).


"""Exports all current junnction parameter values for each junction in the PCell.

Assumes that a single chip exists in the top cell, and it is a PCell.
Results of this macro can be used to tune junctions for cells without PCell data.
"""

import json
from kqcircuits.klayout_view import KLayoutView
from kqcircuits.util.replace_junctions import extract_junctions, get_tuned_junction_json

top_cell = KLayoutView(current=True).active_cell

### Set file location, or leave empty to get tuned junction JSON in the output
FILE_LOCATION = ""

try:
  junctions = extract_junctions(top_cell, {})
  if len(junctions) &gt; 0:
    json_str = json.dumps(get_tuned_junction_json(junctions), indent=2)

    if FILE_LOCATION:
      with open(FILE_LOCATION, 'w') as file:
        file.write(json_str)
        print(f"Wrote junction parameters to {FILE_LOCATION}")
    else:
      print(json_str)
  else:
    print("No junctions detected")
except ValueError:
  raise ValueError("For this macro to work, the active layout must contain a chip PCell, for which PCell parameters are present")
</text>
</klayout-macro>
