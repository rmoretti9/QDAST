<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Coordinates of airbridges to textfile</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).


from kqcircuits.klayout_view import KLayoutView
from kqcircuits.defaults import TMP_PATH
from kqcircuits.elements.airbridges.airbridge import Airbridge

"""Exports a text file with coordinates of airbridges in the selected cells.

Each line in the exported file consists of five points for an airbridge, separated by semicolons.
First point is the center, other points are corners.

Usage:
1. change the cell_name and file_name if needed
2. choose the cells in GUI by dragging a box around them
3. run the macro
"""

cell_name = Airbridge.default_type  # any cell that starts with this string will be counted
file_name = "airbridge_coordinates.txt"

view = KLayoutView(current=True)
layout = view.layout
airbridge_coordinates = []


def add_airbridge_coordinates(cell, trans):
    dbbox = trans*cell.dbbox()
    corner_1 = pya.DPoint(dbbox.left, dbbox.bottom)
    corner_2 = pya.DPoint(dbbox.left, dbbox.top)
    corner_3 = pya.DPoint(dbbox.right, dbbox.top)
    corner_4 = pya.DPoint(dbbox.right, dbbox.bottom)
    airbridge_coordinates.append((trans.disp, corner_1, corner_2, corner_3, corner_4))


def find_airbridge_coordinates(inst, trans):
    if inst.cell.name.startswith(cell_name):
        total_trans = trans*inst.dtrans
        add_airbridge_coordinates(inst.cell, total_trans)
    # workaround for getting the cell due to KLayout bug, see
    # https://www.klayout.de/forum/discussion/1191/cell-shapes-cannot-call-non-const-method-on-a-const-reference
    # TODO: replace by `cell = inst.cell` once KLayout bug is fixed
    cell = view.layout.cell(inst.cell.cell_index())
    for sub_inst in cell.each_inst():
        find_airbridge_coordinates(sub_inst, trans*inst.dtrans)


def point_to_str(point):
    return f"{point.x:.3f}, {point.y:.3f}"


static_cells = set()  # tuples of (cell, cell transform)
for obj in view.layout_view.object_selection:
    if obj.is_cell_inst():
        inst = obj.inst()
        find_airbridge_coordinates(inst, pya.DTrans())
    else:
        cell = layout.cell(obj.cell_index())
        if cell.name.startswith(cell_name):
            static_cells.add((cell, obj.source_dtrans()))
for cell in static_cells:
    add_airbridge_coordinates(cell[0], cell[1])

# sort the coordinates left-to-right and bottom-to-top (so first element will be the lowest leftmost airbridge)
airbridge_coordinates = sorted(airbridge_coordinates, key=lambda coord: (coord[0].x, coord[0].y))

file_path = TMP_PATH/file_name
with open(file_path, "w") as f:
    for coord in airbridge_coordinates:
        f.write(
            f"{point_to_str(coord[0])}; {point_to_str(coord[1])}; {point_to_str(coord[2])}; {point_to_str(coord[3])}; {point_to_str(coord[4])}\n")

print(f"Exported airbridge coordinates to '{file_path}'")

</text>
</klayout-macro>
