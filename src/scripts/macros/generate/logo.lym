<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>KQCircuits logo</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).


from kqcircuits.pya_resolver import pya

from kqcircuits.klayout_view import KLayoutView
from kqcircuits.elements.waveguide_composite import WaveguideComposite, Node

view = KLayoutView()

h = 300 # height
k = 250 # kernel
s = 0.6 # scaling
nodes = [[ # K 1
        Node(s*pya.DPoint(-50,0)),
        Node(s*pya.DPoint(-50,h))
    ], [ # K 1
        Node(s*pya.DPoint(110,h*0.037)),
        Node(s*pya.DPoint(30-50,h*.55)),
        Node(s*pya.DPoint(110,h*0.959))
    ],  [ # Q
        Node(s*pya.DPoint(k-50,h/8)),
        Node(s*pya.DPoint(k-100,h/4)),
        Node(s*pya.DPoint(k-100,h*3/4)),
        Node(s*pya.DPoint(k,h)),
        Node(s*pya.DPoint(k+100,h*3/4)),
        Node(s*pya.DPoint(k+100,h/4)),
        Node(s*pya.DPoint(k,0), n_bridges=1),
        Node(s*pya.DPoint(k-50,h/8)),
    ], [ # C
        Node(s*pya.DPoint(k*2.07+100,h/4)),
        Node(s*pya.DPoint(k*2.07,0)),
        Node(s*pya.DPoint(k*2.07-100,h/4)),
        Node(s*pya.DPoint(k*2.07-100,h*3/4)),
        Node(s*pya.DPoint(k*2.07,h*1.00)),
        Node(s*pya.DPoint(k*2.07+100,h*3/4)),
    ]
]

for line in nodes:
    wg = WaveguideComposite.create(view.layout, nodes=line, r=s*70, a=s*15, b=s*10)
    view.insert_cell(wg)


from kqcircuits.defaults import SRC_PATHS
from pathlib import Path
import os

gds_path = os.path.join(SRC_PATHS[0], Path("logo.gds"))
view.layout.write(gds_path)
view.focus()

print("GDS written to {}".format(gds_path))

"""

# use gdspy in another pyenv to generate svg

import gdspy
gdspy_library = gdspy.GdsLibrary(infile=str("logo.gds"))
gdspy_library.cells["logo"].write_svg("logo.svg")

# replace css style in svg to make use of IQM colours

&lt;style type="text/css"&gt;
	/* CPW centre */
	.l16d0 {
		fill: none;
	}
	/* Airbridge */
	.l29d3 {
		fill: #666;
		fill-opacity: 0.5;
	}
	/* Airbridge pads */
	.l28d3 {
		fill: #7b7c7f;
		fill-opacity: 0.5;
	}
	/* Background */
	rect {
		fill: none;
	}

	@media (prefers-color-scheme: dark) {
		/* CPW gap */
		.l11d1 {
			fill: white;
		}
		/* Airbridge pads */
		.l28d3 {
			fill: #fafcf5;
			fill-opacity: 0.5;
		}
		/* Airbridge */
		.l29d3 {
			fill: #d1d1d1;
			fill-opacity: 0.5;
		}
	}

	/* NOT SHOWN */

	/* CPW avoidance */
	.l14d0 {
		fill-opacity: 0.0;
	}
	/* CPW refpoints */
	.l39t0 {
		fill-opacity: 0.0;
	}
	/* Text */
	.l225t0 {
		fill-opacity: 0.0;
	}
&lt;/style&gt;

"""</text>
</klayout-macro>
