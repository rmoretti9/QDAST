<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Tutorial for creating PCells</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).


from kqcircuits.pya_resolver import pya
from kqcircuits.klayout_view import KLayoutView
from kqcircuits.elements.airbridges.airbridge import Airbridge
from kqcircuits.elements.airbridges.airbridge_rectangular import AirbridgeRectangular
from kqcircuits.chips.xmons_direct_coupling import XMonsDirectCoupling


"""Tutorial macro showing how to place PCells in a layout.

While running the code, please use the breakpoints and debugger, as otherwise the entire code will be executed at once.
You could also comment out specific parts of the code.
"""

"""
Preparing an empty layout:

This command creates a new tab in KLayout, and populates the layout with KQCircuit default layers and a top cell.
"""
view = KLayoutView()

"""
Creating an example cell in the layout:

The create function creates an element with given parameters, and returns the PCell object that refers to it. A PCell
is always created inside Layout.  
"""
cell_ab_crossing = Airbridge.create(
    view.layout,
    bridge_length=4000,
    bridge_width=500,
    pad_extra=50,
    pad_width=600,
    pad_length=500,
)

"""
The cell is now created, but not visible since it is not the current top cell. The following shows our new cell as top 
cell, and makes sure the whole cell is shown.
"""
view.focus(cell_ab_crossing)


"""
Now we are able to see the basic cell we have created as a separate structure. But it is still not a member of the 
top cell we have defined.

Let's focus back ont he top cell, and insert our new cell into the top cell with the insert_cell method.

pya.DTrans() : We use this to give a particular location to the cell we insert in the coordinate system.
  It is also effective for various types of transformation for the inserted cell.

"""
view.insert_cell(cell_ab_crossing, pya.DTrans(0.0, 0.0))
view.focus(view.top_cell)

"""
Let's create another new cell, but this time it will not be a basic structure that is consisted of
only shapes, but a Chip that contains various types of other shapes and cells.

In this example, we use the shorter form of insert_cell, that accepts an Element class and parameters directly. This 
is the preferred syntax if you do not need to keep a reference to the PCell object. 
"""
view.insert_cell(
    XMonsDirectCoupling,
    trans=pya.DTrans(1000.0, 0.0),
    name_mask="EXM",
    name_copy=None,
    with_grid=False,
    name_chip="XC1",
    qubit_spacing=35,
    arm_width_a=24,
    arm_width_b=34,
)

"""
Calling view.focus() with no arguments makes sure the current cell is shown fully and with all hierarchy levels.
"""
view.focus()
</text>
</klayout-macro>
