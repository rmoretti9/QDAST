<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Basic examples of cells</description>
 <version>0.1</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path>kqcircuits_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).



"""Demo macro showing how to generate some basic structures with the KLayout pya API.


This macro is intended to learn about the KLayout API. To get started with KQCircuits, it is recommended to use the
helper object KLayoutView, which takes care of the basic operations and provides an easier interface to developers
KQC macros. See the demo_placing_a_cell macro for examples on how to use KLayoutView.
"""

import math
import numpy

from kqcircuits.defaults import default_layers
from kqcircuits.elements.waveguide_coplanar import WaveguideCoplanar

# Usually the layout, top_cell, layout_view and cell_view are generated using
# KLayoutView from kqcircuits.klayout_view, here we create them manually as example.

app = pya.Application.instance()
mw = app.main_window()
layout_view = mw.current_view()

# Do we have a view?
if layout_view == None:
  # Create a new view
  cell_view = mw.create_layout(1)
  layout = cell_view.layout()
  layout_view = mw.current_view()
else:
  # Use an active view
  cell_view = pya.CellView.active()
  layout = cell_view.layout()

cell = layout.create_cell("Top") # A new cell into the layout
cell_view.cell_name=cell.name     # Shows the new cell

# Add default layers. Usually we use the default layer list generated
# by KQCircuits, but here we show how to create layers manually.
l1 = layout.layer(pya.LayerInfo(1,0,"b_base_metal_gap_wo_grid"))
l2 = layout.layer(pya.LayerInfo(2,0,"b_ground_grid_avoidance"))
l3 = layout.layer(pya.LayerInfo(3,0,"b_SIS_junction"))
l4 = layout.layer(pya.LayerInfo(4,0,"New guidelines"))

# Draw test structures on all layers
cell.shapes(l1).insert(pya.DBox(0, 0, 100, 200))
cell.shapes(l2).insert(pya.DBox(0, 0, 200, 100))
cell.shapes(l3).insert(pya.DBox(0, 0, -100, -200))

# Text

c1 = layout.create_cell("TEXT", "Basic", {
  "layer": layout.get_info(l2),
  "text": "Test 44",
  "mag": 100.0
})

cell.insert(pya.DCellInstArray(c1.cell_index(), pya.DTrans(pya.DVector(0, -100))))

# Wiggly lines

points = []
n = 30
for x in range(0,n):
  points.append(pya.DPoint(x*30,5*n*math.sin(x/(n/3)*math.pi)))
for x in range(0,n):
  points.append(pya.DPoint(n*30-5*n*math.sin(x/(n/3)*math.pi),-x*30))
for x in range(0,n):
  points.append(pya.DPoint(n*30-x*30,-5*n*math.sin(x/(n/3)*math.pi)-n*30))
for x in range(0,n):
  points.append(pya.DPoint(5*n*math.sin(x/(n/3)*math.pi),x*30-n*30))

guideline = pya.DPath(points,5)

c1 = WaveguideCoplanar.create(layout, path=guideline, r=50)

cell.insert(pya.DCellInstArray(c1.cell_index(), pya.DTrans(pya.DVector(200, -400))))

# Circles

def circle(n, step, offset, shift):
  points = []
  for x in range(0,n):
    points.append(pya.DPoint(200*math.cos((x*step+offset)*math.pi)-1000,200*math.sin((x*step+offset)*math.pi)-1000))

  guideline = pya.DPath(points,5)

  c1 = WaveguideCoplanar.create(layout, path=guideline)

  cell.insert(pya.DCellInstArray(c1.cell_index(), shift))

circle(30, -1/10, 0, pya.DTrans(pya.DVector(0, 200)))
circle(6, -1/2, 0, pya.DTrans(pya.DVector(0, -300)))
circle(6, -1/2, 0.25, pya.DTrans(pya.DVector(0, -800)))
circle(6, 1/2, 0.25, pya.DTrans(pya.DVector(0, -1200)))

layout_view.add_missing_layers()</text>
</klayout-macro>
